// Code generated by MockGen. DO NOT EDIT.
// Source: kubernetes/service/nacosService.go

// Package goconvey is a generated GoMock package.
package goconvey

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	vo "xincan.com.cn/istorm-cnbr-operator/vo"
)

// MockIKubernetesService is a mock of IKubernetesService interface
type MockIKubernetesService struct {
	ctrl     *gomock.Controller
	recorder *MockIKubernetesServiceMockRecorder
}

// MockIKubernetesServiceMockRecorder is the mock recorder for MockIKubernetesService
type MockIKubernetesServiceMockRecorder struct {
	mock *MockIKubernetesService
}

// NewMockIKubernetesService creates a new mock instance
func NewMockIKubernetesService(ctrl *gomock.Controller) *MockIKubernetesService {
	mock := &MockIKubernetesService{ctrl: ctrl}
	mock.recorder = &MockIKubernetesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIKubernetesService) EXPECT() *MockIKubernetesServiceMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockIKubernetesService) Add(num1, num2 int) (*vo.KubernetesVo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", num1, num2)
	ret0, _ := ret[0].(*vo.KubernetesVo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockIKubernetesServiceMockRecorder) Add(num1, num2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIKubernetesService)(nil).Add), num1, num2)
}

// Sub mocks base method
func (m *MockIKubernetesService) Sub(num1, num2 int) (*vo.KubernetesVo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", num1, num2)
	ret0, _ := ret[0].(*vo.KubernetesVo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sub indicates an expected call of Sub
func (mr *MockIKubernetesServiceMockRecorder) Sub(num1, num2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockIKubernetesService)(nil).Sub), num1, num2)
}

// Mul mocks base method
func (m *MockIKubernetesService) Mul(num1, num2 int) (*vo.KubernetesVo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mul", num1, num2)
	ret0, _ := ret[0].(*vo.KubernetesVo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mul indicates an expected call of Mul
func (mr *MockIKubernetesServiceMockRecorder) Mul(num1, num2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mul", reflect.TypeOf((*MockIKubernetesService)(nil).Mul), num1, num2)
}

// Div mocks base method
func (m *MockIKubernetesService) Div(num1, num2 int) (*vo.KubernetesVo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Div", num1, num2)
	ret0, _ := ret[0].(*vo.KubernetesVo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Div indicates an expected call of Div
func (mr *MockIKubernetesServiceMockRecorder) Div(num1, num2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Div", reflect.TypeOf((*MockIKubernetesService)(nil).Div), num1, num2)
}

// Ave mocks base method
func (m *MockIKubernetesService) Ave(num1, num2 int) (*vo.KubernetesVo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ave", num1, num2)
	ret0, _ := ret[0].(*vo.KubernetesVo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ave indicates an expected call of Ave
func (mr *MockIKubernetesServiceMockRecorder) Ave(num1, num2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ave", reflect.TypeOf((*MockIKubernetesService)(nil).Ave), num1, num2)
}
